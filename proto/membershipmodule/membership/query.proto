syntax = "proto3";

package membershipmodule.membership;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "membershipmodule/membership/params.proto";
import "membershipmodule/membership/member.proto";

option go_package = "github.com/noria-net/module-membership/x/membership/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/params";
  
  }
  
  // Queries a Member using their wallet address
  rpc Member (QueryMemberRequest) returns (QueryMemberResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/member/{address}";
  
  }
  
  // Queries a list of Members items.
  rpc Members (QueryMembersRequest) returns (QueryMembersResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/members";
  
  }
  
  // Queries a list of Guardians items.
  rpc Guardians (QueryGuardiansRequest) returns (QueryGuardiansResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/guardians";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryMemberRequest {
  string address = 1;
}

message QueryMemberResponse {
  Member member = 1;
}

message QueryMembersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMembersResponse {
  repeated Member                                 members    = 1 [(gogoproto.nullable) = true];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGuardiansRequest {}

message QueryGuardiansResponse {
  repeated Member members = 1 [(gogoproto.nullable) = true];
  bytes total_voting_weight = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true,
    (gogoproto.jsontag) = "total_voting_weight"
  ];
}

