syntax = "proto3";

package membershipmodule.membership;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "membershipmodule/membership/member.proto";
import "membershipmodule/membership/params.proto";

option go_package = "github.com/noria-net/module-membership/x/membership/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/params";
  }

  // Queries a Member using their wallet address
  rpc Member(QueryMemberRequest) returns (QueryMemberResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/member/{address}";
  }

  // Queries a list of Members items.
  rpc Members(QueryMembersRequest) returns (QueryMembersResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/members";
  }

  // Queries a list of Guardians items.
  rpc Guardians(QueryGuardiansRequest) returns (QueryGuardiansResponse) {
    option (google.api.http).get = "/noria-net/module-membership/membership/guardians";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryMemberRequest specifies the member to query.
message QueryMemberRequest {
  // address defines the address of the member to query for.
  string address = 1;
}

// QueryMemberResponse contains the member details.
message QueryMemberResponse {
  // member contains the member details.
  Member member = 1;
}

// QueryMembersRequest is request type for the Query/Members RPC method.
message QueryMembersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryMembersResponse is response type for the Query/Members RPC method.
message QueryMembersResponse {
  repeated Member members = 1 [(gogoproto.nullable) = true];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGuardiansRequest is request type for the Query/Guardians RPC method.
message QueryGuardiansRequest {}

// QueryGuardiansResponse is response type for the Query/Guardians RPC method.
message QueryGuardiansResponse {
  // guardians contains the list of guardians.
  repeated Member members = 1 [(gogoproto.nullable) = true];
  // total_voting_weight contains the total voting weight of all guardians.
  bytes total_voting_weight = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true,
    (gogoproto.jsontag) = "total_voting_weight"
  ];
}
