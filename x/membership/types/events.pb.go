// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: membershipmodule/membership/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventMemberEnrolled is an event emitted when a new member joins The Denom
type EventMemberEnrolled struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
}

func (m *EventMemberEnrolled) Reset()         { *m = EventMemberEnrolled{} }
func (m *EventMemberEnrolled) String() string { return proto.CompactTextString(m) }
func (*EventMemberEnrolled) ProtoMessage()    {}
func (*EventMemberEnrolled) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec29745b3464b1, []int{0}
}
func (m *EventMemberEnrolled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMemberEnrolled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMemberEnrolled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMemberEnrolled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMemberEnrolled.Merge(m, src)
}
func (m *EventMemberEnrolled) XXX_Size() int {
	return m.Size()
}
func (m *EventMemberEnrolled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMemberEnrolled.DiscardUnknown(m)
}

var xxx_messageInfo_EventMemberEnrolled proto.InternalMessageInfo

func (m *EventMemberEnrolled) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

// EventMemberStatusChanged is an event emitted when a member's citizenship
// status changes
type EventMemberStatusChanged struct {
	MemberAddress  string           `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	Status         MembershipStatus `protobuf:"varint,2,opt,name=status,proto3,enum=membershipmodule.membership.MembershipStatus" json:"status,omitempty"`
	PreviousStatus MembershipStatus `protobuf:"varint,3,opt,name=previous_status,json=previousStatus,proto3,enum=membershipmodule.membership.MembershipStatus" json:"previous_status,omitempty"`
	Operator       string           `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *EventMemberStatusChanged) Reset()         { *m = EventMemberStatusChanged{} }
func (m *EventMemberStatusChanged) String() string { return proto.CompactTextString(m) }
func (*EventMemberStatusChanged) ProtoMessage()    {}
func (*EventMemberStatusChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec29745b3464b1, []int{1}
}
func (m *EventMemberStatusChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMemberStatusChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMemberStatusChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMemberStatusChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMemberStatusChanged.Merge(m, src)
}
func (m *EventMemberStatusChanged) XXX_Size() int {
	return m.Size()
}
func (m *EventMemberStatusChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMemberStatusChanged.DiscardUnknown(m)
}

var xxx_messageInfo_EventMemberStatusChanged proto.InternalMessageInfo

func (m *EventMemberStatusChanged) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *EventMemberStatusChanged) GetStatus() MembershipStatus {
	if m != nil {
		return m.Status
	}
	return MembershipStatus_MemberStatusEmpty
}

func (m *EventMemberStatusChanged) GetPreviousStatus() MembershipStatus {
	if m != nil {
		return m.PreviousStatus
	}
	return MembershipStatus_MemberStatusEmpty
}

func (m *EventMemberStatusChanged) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func init() {
	proto.RegisterType((*EventMemberEnrolled)(nil), "membershipmodule.membership.EventMemberEnrolled")
	proto.RegisterType((*EventMemberStatusChanged)(nil), "membershipmodule.membership.EventMemberStatusChanged")
}

func init() {
	proto.RegisterFile("membershipmodule/membership/events.proto", fileDescriptor_b0ec29745b3464b1)
}

var fileDescriptor_b0ec29745b3464b1 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0x4d, 0xcd, 0x4d,
	0x4a, 0x2d, 0x2a, 0xce, 0xc8, 0x2c, 0xc8, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0xd5, 0x47, 0x08, 0xe8,
	0xa7, 0x96, 0xa5, 0xe6, 0x95, 0x14, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x49, 0xa3, 0xab,
	0xd4, 0x43, 0x08, 0x48, 0xe1, 0x35, 0x06, 0xc2, 0x84, 0x18, 0xa3, 0x64, 0xc3, 0x25, 0xec, 0x0a,
	0x32, 0xd6, 0x17, 0x2c, 0xe8, 0x9a, 0x57, 0x94, 0x9f, 0x93, 0x93, 0x9a, 0x22, 0xa4, 0xca, 0xc5,
	0x07, 0x51, 0x16, 0x9f, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c, 0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0xc4, 0x0b, 0x11, 0x75, 0x84, 0x08, 0x2a, 0xfd, 0x61, 0xe4, 0x92, 0x40, 0xd2, 0x1e, 0x5c,
	0x92, 0x58, 0x52, 0x5a, 0xec, 0x9c, 0x91, 0x98, 0x97, 0x4e, 0xb4, 0x19, 0x42, 0xae, 0x5c, 0x6c,
	0xc5, 0x60, 0x7d, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xba, 0x7a, 0x78, 0x7c, 0xa6, 0xe7,
	0x0b, 0x67, 0x42, 0x2c, 0x0b, 0x82, 0x6a, 0x16, 0x0a, 0xe3, 0xe2, 0x2f, 0x28, 0x4a, 0x2d, 0xcb,
	0xcc, 0x2f, 0x2d, 0x8e, 0x87, 0x9a, 0xc7, 0x4c, 0x8e, 0x79, 0x7c, 0x30, 0x53, 0x20, 0x7c, 0x21,
	0x29, 0x2e, 0x8e, 0xfc, 0x82, 0xd4, 0xa2, 0xc4, 0x92, 0xfc, 0x22, 0x09, 0x16, 0xb0, 0xfb, 0xe1,
	0x7c, 0xa7, 0xe0, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71,
	0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x4c, 0xcf,
	0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcb, 0x2f, 0xca, 0x4c, 0xd4, 0xcd,
	0x4b, 0x2d, 0xd1, 0x87, 0x58, 0xaf, 0x8b, 0x14, 0x17, 0x15, 0xc8, 0x11, 0x53, 0x52, 0x59, 0x90,
	0x5a, 0x9c, 0xc4, 0x06, 0x8e, 0x18, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x7b, 0xa1,
	0x9a, 0x0b, 0x02, 0x00, 0x00,
}

func (m *EventMemberEnrolled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMemberEnrolled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMemberEnrolled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMemberStatusChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMemberStatusChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMemberStatusChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x22
	}
	if m.PreviousStatus != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PreviousStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventMemberEnrolled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMemberStatusChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	if m.PreviousStatus != 0 {
		n += 1 + sovEvents(uint64(m.PreviousStatus))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventMemberEnrolled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMemberEnrolled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMemberEnrolled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMemberStatusChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMemberStatusChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMemberStatusChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MembershipStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			m.PreviousStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStatus |= MembershipStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
